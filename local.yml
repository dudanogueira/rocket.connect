version: "3.7"

volumes:
  local_postgres_data: {}
  local_postgres_data_backups: {}
  local_rocket_mongodb_data: { driver: local }
  local_waautomate_data: {}
  local_wppconnect_data: {}
  local_wppconnect_tokens: {}
  local_prometeus_data: {}
  nodemodules: {}

services:

  django:
    &django
    build:
      context: .
      dockerfile: ./compose/local/django/Dockerfile
    image: rocket_connect_local_django
    container_name: django
    depends_on:
      - postgres
      - mailhog
      - redis
      - celeryworker
    volumes:
      - .:/app:z
    env_file:
      - ./.envs/.local/.django
      - ./.envs/.local/.postgres
      #- ./.env
    ports:
      - "8000:8000"
    healthcheck:
      test: curl --fail http://localhost:8000
      interval: 30s
      timeout: 10s
      retries: 3

    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: rocket_connect_production_postgres
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - local_postgres_data:/var/lib/postgresql/data:Z
      - local_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.local/.postgres

  docs:
    image: rocket_connect_local_docs
    container_name: docs
    build:
      context: .
      dockerfile: ./compose/local/docs/Dockerfile
    env_file:
      - ./.envs/.local/.django
    volumes:
      - ./docs:/docs:z
      - ./config:/app/config:z
      - ./rocket_connect:/app/rocket_connect:z
    ports:
      - "7000:7000"
    command: /start-docs

  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "8025:8025"

  redis:
    image: redis:5.0
    container_name: redis

  celeryworker:
    <<: *django
    image: rocket_connect_local_celeryworker
    container_name: celeryworker
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    healthcheck:
      disable: true
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: rocket_connect_local_celerybeat
    container_name: celerybeat
    depends_on:
      - redis
      - postgres
      - mailhog
    ports: []
    healthcheck:
      disable: true
    command: /start-celerybeat

  flower:
    <<: *django
    image: rocket_connect_local_flower
    container_name: flower
    ports:
      - "5555:5555"
    healthcheck:
      test: curl --fail http://localhost:5555
      interval: 30s
      timeout: 10s
      retries: 3
    command: /start-flower


  rocketchat:
    image: registry.rocket.chat/rocketchat/rocket.chat:${RELEASE:-develop}
    restart: on-failure
    environment:
      MONGO_URL: "${MONGO_URL:-\
        mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/\
          ${MONGODB_DATABASE:-rocketchat}?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}"
      MONGO_OPLOG_URL: "${MONGO_OPLOG_URL:\
        -mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/\
          local?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}"
      ROOT_URL: ${ROOT_URL:-http://localhost:${HOST_PORT:-3000}}
      PORT: ${PORT:-3000}
      ADMIN_USERNAME: adminrc
      ADMIN_PASS: admin
      ADMIN_EMAIL: admin@example.com
      OVERWRITE_SETTING_Accounts_TwoFactorAuthentication_Enforce_Password_Fallback: "false"
      OVERWRITE_SETTING_SMTP_Host: mailhog
      OVERWRITE_SETTING_SMTP_Port: 1025
      OVERWRITE_SETTING_From_Email: from@email.com
      OVERWRITE_SETTING_API_Enable_Rate_Limiter: "false"
      OVERWRITE_SETTING_Livechat_validate_offline_email: "false"
      CREATE_TOKENS_FOR_USERS: "true"
      OVERWRITE_SETTING_Accounts_SystemBlockedUsernameList: administrator,system,user
      OVERWRITE_SETTING_Apps_Framework_Development_Mode: "true"
      OVERWRITE_SETTING_Prometheus_Enabled: "true"
    depends_on:
      - mongodb
    expose:
      - ${PORT:-3000}
    ports:
      - host_ip: ${BIND_IP:-0.0.0.0}
        target: ${PORT:-3000}
        published: ${HOST_PORT:-3000}
        protocol: tcp
        mode: host

  mongodb:
    image: docker.io/bitnami/mongodb:${MONGODB_VERSION:-4.4}
    restart: on-failure
    volumes:
      - local_rocket_mongodb_data:/bitnami/mongodb
    environment:
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_REPLICA_SET_NAME: ${MONGODB_REPLICA_SET_NAME:-rs0}
      MONGODB_PORT_NUMBER: ${MONGODB_PORT_NUMBER:-27017}
      MONGODB_INITIAL_PRIMARY_HOST: ${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}
      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: ${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}
      MONGODB_ADVERTISED_HOSTNAME: ${MONGODB_ADVERTISED_HOSTNAME:-mongodb}
      MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL:-true}
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}
    ports:
      - 27017:27017

  webdav:
    image: bytemark/webdav
    volumes:
      - /tmp/web:/var/lib/dav
    environment:
      - AUTH_TYPE=Basic
      - USERNAME=alice
      - PASSWORD=secret1234
      - LOCATION=/webdav
    ports:
      - 8011:80


  # browser:
  #   image: browserless/chrome:1.48.0-chrome-stable
  #   hostname: browser
  #   ports:
  #     - "3010:3000"
  #   environment:
  #     CONNECTION_TIMEOUT: -1
  #     KEEP_ALIVE: 'true'
  #     WORKSPACE_EXPIRE_DAYS: 1
  #     ENABLE_CORS: 'true'
  #     CHROME_REFRESH_TIME: 86400000
  #     DEFAULT_BLOCK_ADS: 'true'
  #     FUNCTION_ENABLE_INCOGNITO_MODE: 'true'
  #     ENABLE_XVBF: 'true'
  #     CHROME_PATH: '/usr/bin/google-chrome'
  #     USE_CHROME_STABLE: 'true'
  #     NODE_ENV: 'production'

  # waautomate:
  #   # waautomate options ar at  ./compose/local/waautomate/cli.config.json
  #   build:
  #     context: ./compose/local/waautomate
  #   command: npx @open-wa/wa-automate --ev
  #     "http://django.docker:8000/connector/CONNECTOR_EXTERNAL_TOKEN1/?ev=1"
  #     --no-kill-on-logout --api-host 'http://127.0.0.1:8081' --browserWSEndpoint
  #     'http://browser:3000' -w
  #     'http://django.docker:8000/connector/CONNECTOR_EXTERNAL_TOKEN1/'
  #     --sessionId waautomate1
  #   restart: unless-stopped
  #   volumes:
  #     - local_waautomate_data:/usr/src/app/session_data
  #     - ./compose/local/waautomate/instance1/cli.config.json:/usr/src/app/ccli.config.json
  #   links:
  #     - "django:django.docker"
  #   depends_on:
  #     - browser
  #   ports:
  #     - "8001:8002"

  wppconnect:
    image: wppconnect/server-cli:main
    # for command options: https://github.com/wppconnect-team/server-cli/blob/main/src/program.js
    command: wppserver
    volumes:
      - local_wppconnect_data:/usr/src/server-cli/userDataDir
    ports:
      - "21465:21465"

  # wppconnect:
  #   image: dudanogueira/wpp-server:latest
  #   volumes:
  #     - ./compose/local/wppconnect/config.json:/usr/src/wpp-server/src/config.json
  #     - local_wppconnect_data:/usr/src/server-cli/userDataDir
  #   ports:
  #     - "21465:21465"

  apache:
    image: 'php:apache'
    ports:
      - "82:82"
    volumes:
      - ./compose/local/apache/site:/var/www/html
      - ./compose/local/apache/confs/additional.conf:/etc/apache2/conf-enabled/additional.conf

  grafana:
    image: grafana/grafana:8.2.5
    ports:
      - 3002:3000
    volumes:
      - ./compose/local/rocket_metrics/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./compose/local/rocket_metrics/grafana/provisioning/dashboards/provider:/etc/grafana/provisioning/dashboards:ro
      - ./compose/local/rocket_metrics/grafana/provisioning/dashboards/json-exports:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus

  prometheus:
    image: quay.io/prometheus/prometheus:v2.31.1
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - '--storage.tsdb.retention.time=12w'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - local_prometeus_data:/prometheus
      - ./compose/local/rocket_metrics/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
